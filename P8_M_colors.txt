#include <iostream>
#define V 43
using namespace std;

bool graph[V][V] =
    //********************* TEST CASE 1 *********************
    {
        {0, 1, 1},
        {1, 0, 1},
        {1, 1, 0},
};
//********************* TEST CASE 2 *********************
//     {
//         {0, 1, 1, 1, 1, 1, 1, 1, 1},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 0, 0, 0, 0, 0, 0, 0, 0},

// };

void showColors(int color[])
{
    cout << "Assigned Colors are: " << endl;
    for (int i = 0; i < V; i++)
        cout << color[i] << " ";
    cout << endl;
}

bool isValid(int v, int color[], int c)
{
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i])
            return false;
    return true;
}

bool graphColoring(int colors, int color[], int vertex)
{
    if (vertex == V) 
        return true;

    for (int col = 1; col <= colors; col++)
    {
        if (isValid(vertex, color, col))
        {
            color[vertex] = col;
            if (graphColoring(colors, color, vertex + 1) == true)
                return true;

            color[vertex] = 0;
        }
    }
    return false;
}

bool checkSolution(int m)
{
    int *color = new int[V]; 

    for (int i = 0; i < V; i++)
        color[i] = 0; // initially set to 0

    if (graphColoring(m, color, 0) == false)
    {
        cout << "Not Bicolorable";
        return false;
    }
    showColors(color);

    return true;
}

int main()
{
    int colors = 2; // Number of colors
    if (checkSolution(colors))
    {
        cout << "Bicolorable" << endl;
    }
}